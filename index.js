const map = [
  { value: "NUL", description: "Null char" },
  { value: "SOH", description: "Start of Heading" },
  { value: "STX", description: "Start of Text" },
  { value: "ETX", description: "End of Text" },
  { value: "EOT", description: "End of Transmission" },
  { value: "ENQ", description: "Enquiry" },
  { value: "ACK", description: "Acknowledgment" },
  { value: "BEL", description: "Bell" },
  { value: "BS", description: "Back Space" },
  { value: "HT", description: "Horizontal Tab" },
  { value: "LF", description: "Line Feed" },
  { value: "VT", description: "Vertical Tab" },
  { value: "FF", description: "Form Feed" },
  { value: "CR", description: "Carriage Return" },
  { value: "SO", description: "Shift Out / X-On" },
  { value: "SI", description: "Shift In / X-Off" },
  { value: "DLE", description: "Data Line Escape" },
  { value: "DC1", description: "Device Control 1 (oft. XON)" },
  { value: "DC2", description: "Device Control 2" },
  { value: "DC3", description: "Device Control 3 (oft. XOFF)" },
  { value: "DC4", description: "Device Control 4" },
  { value: "NAK", description: "Negative Acknowledgement" },
  { value: "SYN", description: "Synchronous Idle" },
  { value: "ETB", description: "End of Transmit Block" },
  { value: "CAN", description: "Cancel" },
  { value: "EM", description: "End of Medium" },
  { value: "SUB", description: "Substitute" },
  { value: "ESC", description: "Escape" },
  { value: "FS", description: "File Separator" },
  { value: "GS", description: "Group Separator" },
  { value: "RS", description: "Record Separator" },
  { value: "US", description: "Unit Separator" },
  { value: " ", description: "Space" },
  { value: "!", description: "Exclamation mark" },
  { value: '"', description: "Double quotes (or speech marks)" },
  { value: "#", description: "Number" },
  { value: "$", description: "Dollar" },
  { value: "%", description: "Per cent sign" },
  { value: "&", description: "Ampersand" },
  { value: "'", description: "Single quote" },
  { value: "(", description: "Open parenthesis (or open bracket)" },
  { value: ")", description: "Close parenthesis (or close bracket)" },
  { value: "*", description: "Asterisk" },
  { value: "+", description: "Plus" },
  { value: ",", description: "Comma" },
  { value: "-", description: "Hyphen" },
  { value: ".", description: "Period, dot or full stop" },
  { value: "/", description: "Slash or divide" },
  { value: "0", description: "Zero" },
  { value: "1", description: "One" },
  { value: "2", description: "Two" },
  { value: "3", description: "Three" },
  { value: "4", description: "Four" },
  { value: "5", description: "Five" },
  { value: "6", description: "Six" },
  { value: "7", description: "Seven" },
  { value: "8", description: "Eight" },
  { value: "9", description: "Nine" },
  { value: ":", description: "Colon" },
  { value: ";", description: "Semicolon" },
  { value: "<", description: "Less than (or open angled bracket)" },
  { value: "=", description: "Equals" },
  { value: ">", description: "Greater than (or close angled bracket)" },
  { value: "?", description: "Question mark" },
  { value: "@", description: "At symbol" },
  { value: "A", description: "Uppercase A" },
  { value: "B", description: "Uppercase B" },
  { value: "C", description: "Uppercase C" },
  { value: "D", description: "Uppercase D" },
  { value: "E", description: "Uppercase E" },
  { value: "F", description: "Uppercase F" },
  { value: "G", description: "Uppercase G" },
  { value: "H", description: "Uppercase H" },
  { value: "I", description: "Uppercase I" },
  { value: "J", description: "Uppercase J" },
  { value: "K", description: "Uppercase K" },
  { value: "L", description: "Uppercase L" },
  { value: "M", description: "Uppercase M" },
  { value: "N", description: "Uppercase N" },
  { value: "O", description: "Uppercase O" },
  { value: "P", description: "Uppercase P" },
  { value: "Q", description: "Uppercase Q" },
  { value: "R", description: "Uppercase R" },
  { value: "S", description: "Uppercase S" },
  { value: "T", description: "Uppercase T" },
  { value: "U", description: "Uppercase U" },
  { value: "V", description: "Uppercase V" },
  { value: "W", description: "Uppercase W" },
  { value: "X", description: "Uppercase X" },
  { value: "Y", description: "Uppercase Y" },
  { value: "Z", description: "Uppercase Z" },
  { value: "[", description: "Opening bracket" },
  { value: "\\", description: "Backslash" },
  { value: "]", description: "Closing bracket" },
  { value: "^", description: "Caret - circumflex" },
  { value: "_", description: "Underscore" },
  { value: "`", description: "Grave accent" },
  { value: "a", description: "Lowercase a" },
  { value: "b", description: "Lowercase b" },
  { value: "c", description: "Lowercase c" },
  { value: "d", description: "Lowercase d" },
  { value: "e", description: "Lowercase e" },
  { value: "f", description: "Lowercase f" },
  { value: "g", description: "Lowercase g" },
  { value: "h", description: "Lowercase h" },
  { value: "i", description: "Lowercase i" },
  { value: "j", description: "Lowercase j" },
  { value: "k", description: "Lowercase k" },
  { value: "l", description: "Lowercase l" },
  { value: "m", description: "Lowercase m" },
  { value: "n", description: "Lowercase n" },
  { value: "o", description: "Lowercase o" },
  { value: "p", description: "Lowercase p" },
  { value: "q", description: "Lowercase q" },
  { value: "r", description: "Lowercase r" },
  { value: "s", description: "Lowercase s" },
  { value: "t", description: "Lowercase t" },
  { value: "u", description: "Lowercase u" },
  { value: "v", description: "Lowercase v" },
  { value: "w", description: "Lowercase w" },
  { value: "x", description: "Lowercase x" },
  { value: "y", description: "Lowercase y" },
  { value: "z", description: "Lowercase z" },
  { value: "{", description: "Opening brace" },
  { value: "|", description: "Vertical bar" },
  { value: "}", description: "Closing brace" },
  { value: "~", description: "Equivalency sign - tilde" },
  { value: "delete", description: "Delete" },
];

const largestDescriptionSize = map.reduce((acc, value) => {
  if (value.description.length > acc) {
    return value.description.length;
  }
  return acc;
}, 0);

console.log(
  `| ${"VALUE"} | ${"SYMBOL"} | ${"DESCRIPTION".padEnd(
    largestDescriptionSize,
    " "
  )} |`
);
console.log(
  `| ${"".padEnd(5, "-")} | ${"".padEnd(6, "-")} | ${"".padEnd(
    largestDescriptionSize,
    "-"
  )} |`
);
for (let i = 0; i < map.length; i++) {
  const { value, description } = map[i];
  console.log(
    `| ${i.toString().padStart(5, " ")} | ${value.padEnd(
      6,
      " "
    )} | ${description.padEnd(largestDescriptionSize, " ")} |`
  );
}
